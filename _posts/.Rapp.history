for (i in 1:100) {#
M[i,] <- ifelse(runif(1400)<0.5,-1,1)#
}
head(M)
u <- rnorm(1000)
u <- rnorm(1400)
head(u)
g <- as.vector(crossprod(t(M),u))
head(g)
plot(g)
h2 <- 0.5 #heritability
y <- g + rnorm(100,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
rownames(M) <- 1:100
A <- A.mat(M)
str(A)
head(A)
h2 <- 0.5 #heritability
y <- g + rnorm(100,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
data <- data.frame(y = y, gid = 1:200)
head(data)
ans <- kin.blup(data = data, geno = "gid", pheno = "y", K = A)
data <- data.frame(y = y, gid = 1:100)
head(data)
ans <- kin.blup(data = data, geno = "gid", pheno = "y", K = A)
accuracy <- cor(g,ans$g)
accuracy
str(ans)
plot(g, ans$g)
ans2 <- mixed.solve(y,K=A.mat(M))
str(ans2)
accuracy2 <- cor(g,ans2$u)
accuracy2
plot(g, ans2$u)
M <- matrix(rep(0,124*1400),124,1400)
for (i in 1:124) {#
M[i,] <- ifelse(runif(1400)<0.5,-1,1)#
}
head(M)
u <- rnorm(1400)
head(u)
g <- as.vector(crossprod(t(M),u))
head(g)
plot(g)
h2 <- 0.5 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
phenoEST <- y[1:100,]
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- mrksVal%*%mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
u <- rnorm(1400)
head(u)
g <- as.vector(crossprod(t(M),u))
head(g)
plot(g)
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
phenoEST <- y[1:100]
phenoVal <- y[101:124]
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst, K = A.mat(marksEst))
mrkEff   <- mixed.solve(y = phenoEST, K = A.mat(marksEst))
mrkEff
mrkEff   <- mixed.solve(y = phenoEST, K = A.mat(marksEst))$u
mrkEff
gebvVec2 <- marksVal%*%mrkEff
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
mrkEff   <- mixed.solve(y = phenoEST, K = A.mat(marksEst))
mrkEff
?kinship.BLUP
data <- data.frame(y = phenoEST, gid = 1:100)
marksEst <- M[1:100,]
row.names(marksEst) <- 1:100
head(data)
A <- A.mat(M)
A <- A.mat(marksEst)
A
ans <- kin.blup(data = data, geno = "gid", pheno = "y", K = A)
str(ans)
cor(g[1:100], ans$g)
cor(g, ans$g)
?install.packages
install.packages("BoolNet")
library(BoolNet)
data(cellcycle)
ls()
cellcycle
data(yeastTimeSeries)
yeastTimeSeries
binSeries <- binarizeTimeSeries(yeastTimeSeries)
binSeries
net <- reconstructNetwork(binSeries$binarizedMeasurements, method = "bestfit", maxK = 4)
net <- reconstructNetwork(binSeries$binarizedMeasurements, method = "bestfit", maxK = 4)net
net
plotNetworkWiring(net)
plotNetworkWiring(net)
reconstructNetwork
?reconstructNetwork
net <- reconstructNetwork(binSeries$binarizedMeasurements, method = "bestfit", maxK = 4, returnPBN = TRUE)
net
attract <- getAttractors(cellcycle)
attract
plotAttractors(attract, mode="graph")
attract
cellcycle
binSeries <- binarizeTimeSeries(cellcycle)
cellcycle
yeastTimeSeries
attract
net <- loadBioTapestry("example.btp")
set.wd("/Users/Cody_2/git.repos/BIS180L_web/_posts")
setwd("/Users/Cody_2/git.repos/BIS180L_web/_posts")
shade <- loadNetwork("shade_network.txt")
shade <- loadNetwork("shade_network.txt")
shade
plotNetworkWiring(shade)
?plotNetworkWiring
