phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- mrksVal%*%mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
u <- rnorm(1400)
head(u)
g <- as.vector(crossprod(t(M),u))
head(g)
plot(g)
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
phenoEST <- y[1:100]
phenoVal <- y[101:124]
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
h2 <- 0.9 #heritability
y <- g + rnorm(124,mean=0,sd=sqrt((1-h2)/h2*var(g)))
head(y)
dim(y)
str(y)
phenoEST <- y[1:100]
phenoVal <- y[101:124]
g
str(M)
marksEst <- M[1:100,]
marksVal <- M[101:124,]
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
gebvVec1 <- marksVal%*%mrkEff
(predAb1 <- cor(gebvVec1, phenoVal))
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst, K = A.mat(marksEst))
mrkEff   <- mixed.solve(y = phenoEST, K = A.mat(marksEst))
mrkEff
mrkEff   <- mixed.solve(y = phenoEST, K = A.mat(marksEst))$u
mrkEff
gebvVec2 <- marksVal%*%mrkEff
mrkEff   <- mixed.solve(y = phenoEST, Z = marksEst)$u
mrkEff
mrkEff   <- mixed.solve(y = phenoEST, K = A.mat(marksEst))
mrkEff
?kinship.BLUP
data <- data.frame(y = phenoEST, gid = 1:100)
marksEst <- M[1:100,]
row.names(marksEst) <- 1:100
head(data)
A <- A.mat(M)
A <- A.mat(marksEst)
A
ans <- kin.blup(data = data, geno = "gid", pheno = "y", K = A)
str(ans)
cor(g[1:100], ans$g)
cor(g, ans$g)
rownames(data.pheno.mds) <- data.pheno.mds$Row.names
library(devtools)
devtools::install_github("rjcmarkelz/BIS180L")
data(eurodist)
plot(hclust(eurodist))
data()
data(rivers)
head(rivers)
plot(hclust(rivers))
plot(hclust(dist(rivers)))
data(npk)
head(npk)
plot(hclust(dist(npk)))
npk
npk <- npk[,-1]
plot(hclust(dist(npk)))
data(Loblolly)
head(Loblolly)
Loblolly
setwd("~/git.repos/BIS180L_web/") #Julin
library(knitr)
jekyll.knit <- function(input) {#
    rel.path = substr(input, 6, nchar(input) - 4)#
    output = paste("_posts/", rel.path, ".md", sep = "")#
    knit(input = input, output = output)#
    system(paste("perl -pi -e 's|images/|{{ site.baseurl }}/images/|gi'", output, sep = " ")) # for non-R generated figures#
    system(paste("perl -pi -e 's|figure/|{{ site.baseurl }}/figure/|gi'", output, sep = " ")) # for R figures generated during knitting#
}
jekyll.knit("_rmd/2015-05-19-genetic-networks-1.Rmd")
prcomp_counts <- prcomp(t(GxE_counts)) #gene wise
cities <- read.table("/Users/Cody_2/git.repos/BIS180L_web/data/us_cities.txt", sep = "\t", header = TRUE)
rownames(cities) <- cities$X # make the first column the rownames
cities <- cities[,-1] #remove first column
head(cities)
plot(hclust(dist(cities)))
DE_genes <- read.table("/Users/Cody_2/git.repos/BIS180L_web/data/DEgenes_GxE.csv", sep = ",")
head(DE_genes) #check out the data
DE_gene_names <- row.names(DE_genes)
# make sure to change the path to where you downloaded this using wget
brass_voom_E <- read.table("/Users/Cody_2/git.repos/BIS180L_web/data/voom_transform_brassica.csv", sep = ",", header = TRUE)
GxE_counts <- as.data.frame(brass_voom_E[DE_gene_names,])
GxE_counts <- as.matrix(GxE_counts) # some of the downstream steps require a data matrix
hr <- hclust(dist(GxE_counts))
plot(hr)
hc <- hclust(dist(t(GxE_counts)))
plot(hc)
hc <- hclust(dist(t(GxE_counts)))
plot(hc) #redraw the tree everytime before adding the rectangles
rect.hclust(hc, k = 4, border = "red")
install.packages("pvclust")
library(pvclust)
?pvclust #check out the documentation
set.seed(12456) #important to run this
fit <- pvclust(GxE_counts, method.hclust = "ward.D", method.dist = "euclidean", nboot = 50)
plot(fit) # dendogram with p-values
install.packages("gplots") #not to be confused with ggplot2!
library(gplots)
head(cities) # city example
cities_mat <- as.matrix(cities)
?heatmap.2 #take a look at the arguments
cityclust <- hclust(dist(cities_mat))
heatmap.2(cities_mat, Rowv=as.dendrogram(cityclust), scale="row", density.info="none", trace="none")
hr <- hclust(dist(GxE_counts))
plot(hr)
heatmap.2(GxE_counts, Rowv = as.dendrogram(hr), scale = "row", density.info="none", trace="none")
library(animation)
kmeans.ani(x = cbind(X1 = runif(50), X2 = runif(50)), centers = 3,
hints = c("Move centers!", "Find cluster?"), pch = 1:3, col = 1:3)
library(ggplot2)
prcomp_counts <- prcomp(t(GxE_counts)) #gene wise
scores <- as.data.frame(prcomp_counts$rotation)[,c(1,2)]
set.seed(25) #make this repeatable as kmeans has random starting positions
fit <- kmeans(GxE_counts, 9)
clus <- as.data.frame(fit$cluster)
names(clus) <- paste("cluster")
plotting <- merge(clus, scores, by = "row.names")
plotting$cluster <- as.factor(plotting$cluster)
# plot of observations
ggplot(data = plotting, aes(x = PC1, y = PC2, label = Row.names, color = cluster)) +
geom_hline(yintercept = 0, colour = "gray65") +
geom_vline(xintercept = 0, colour = "gray65") +
geom_point(alpha = 0.8, size = 4, stat = "identity")
install.packages("cluster")
library(cluster)
set.seed(125)
gap <- clusGap(GxE_counts, FUN = kmeans, iter.max = 30, K.max = 20, B = 50, verbose=interactive())
plot(gap, main = "Gap Statistic")
with(gap, maxSE(Tab[,"gap"], Tab[,"SE.sim"], method="firstSEmax"))
kmeans.ani(x = cbind(X1 = runif(50), X2 = runif(50)), centers = 3,#
hints = c("Move centers!", "Find cluster?"), pch = 1:3, col = 1:3)
